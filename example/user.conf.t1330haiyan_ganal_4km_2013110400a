!*******************************************************************************
!     Read me file, readme_user.conf.txt
!*******************************************************************************

!     Author      : Sakakibara Atsushi
!     Date        : 2000/05/08
!     Modification: 2000/06/01, 2000/07/05, 2000/12/18, 2001/01/15,
!                   2001/03/13, 2001/04/15, 2001/06/06, 2001/07/13,
!                   2001/10/18, 2001/11/20, 2002/02/05, 2002/07/23,
!                   2002/08/15, 2002/08/27, 2002/09/02, 2002/09/09,
!                   2002/10/31, 2002/11/11, 2003/04/10, 2003/05/19,
!                   2003/07/15, 2003/08/08, 2003/09/01, 2003/10/10,
!                   2003/11/05, 2003/12/12, 2004/01/09, 2004/03/05,
!                   2004/04/15, 2004/05/07, 2004/05/31, 2004/08/01,
!                   2004/08/20, 2004/09/01, 2004/09/10, 2004/10/12,
!                   2005/01/14, 2005/02/10, 2005/04/04, 2005/08/05,
!                   2005/12/13, 2006/01/10, 2006/02/13, 2006/04/03,
!                   2006/09/30, 2006/11/27, 2006/12/04, 2007/01/05,
!                   2007/01/20, 2007/03/23, 2007/04/11, 2007/04/24,
!                   2007/05/14, 2007/05/21, 2007/06/27, 2007/07/30,
!                   2007/09/28, 2007/11/26, 2008/01/11, 2008/04/17,
!                   2008/07/01, 2008/08/19, 2008/10/10, 2008/12/11,
!                   2009/01/05, 2009/01/30, 2009/03/16, 2010/05/17,
!                   2010/12/17, 2010/12/21, 2011/01/19, 2011/05/16,
!                   2011/07/15, 2011/08/09, 2011/08/18, 2011/09/22,
!                   2011/11/10

!-----7--1----+----2----+----3----+----4----+----5----+----6----+----7----+-----

! Remark:

!     The section sysdep is machine dependance.

!     The following sections mutually depend on the different programs.

!       runame, drname          : all programs
!       dimset, project, gridset: all programs
!       gridsth, terrain        : solver-gridata-asldata-radata
!       flength                 : solver-gridata-asldata-radata-surface
!       boundry, gpvpram        : solver-gridata-asldata
!       rdrpram                 : solver-radata
!       sfcphys                 : solver-gridata-surface-unite
!       mapfcter, coriolis      : solver-unite
!       turbulen, ..., outfomat : solver-unite
!       sysdep, ..., outfomat   : solver-rstruct

!-----7-------------------------------------------------------------------------

 &sysdep
  savmem = 0           ! integer(kind=[4bytes])
                       ! Option for memory saving
 /

 &runame
  exprim = 't1330haiyan_ganal_4km_2013110400a'      ! character(len=80,kind=[1byte])
                       ! Optional run name
 /

 &drname
  crsdir = './t1330haiyan_ganal_4km_2013110400a'        ! character(len=80,kind=[1byte])
                       ! User specified directory for CReSS processing files

  datdir = './GANAL_data'        ! character(len=80,kind=[1byte])
                       ! User specified directory for external data files
 /

 &dimset
  numpe  =  256        ! integer(kind=[4bytes])
                       ! Total number of processor elements

  xgroup =   1         ! integer(kind=[4bytes])
                       ! Number of group domain in entire domain in x direction
  ygroup =   1         ! integer(kind=[4bytes])
                       ! Number of group domain in entire domain in y direction

  xsub   =  16         ! integer(kind=[4bytes])
                       ! Number of sub domain in group domain in x direction
  ysub   =  16         ! integer(kind=[4bytes])
                       ! Number of sub domain in group domain in y direction

  xdim   = 1283        ! integer(kind=[4bytes])
                       ! Model dimension in x direction
                       !   "(xdim - 3) / xsub / xgroup" must be integer

  ydim   =  771        ! integer(kind=[4bytes])
                       ! Model dimension in y direction
                       !   "(ydim - 3) / ysub / ygroup" must be integer

  zdim   =  83         ! integer(kind=[4bytes])
                       ! Model dimension in z direction
 /

 &project
  mpopt =   0          ! integer(kind=[4bytes])
                       ! Option for map projection
                       !   0: Latitude and longitude coordinates
                       !   1: Polar Stereographic projection
                       !   2: Lambert Conformal Conic projection
                       !   3: Mercator projection
                       !   4: No map projection
                       !   5: Two dimensional circular cylinder coordinates
                       !  10: Global latitude and longitude coordinates
                       !  13: Zonal circuit Mercator projection

  nspol =   1          ! integer(kind=[4bytes])
                       ! Option for projected region
                       !  -1: Southern hemisphere
                       !   1: Northern hemisphere

  tlat1 =  30.e0       ! real(kind=[4bytes])
                       ! True latitude 1 [degree]
  tlat2 =  60.e0       ! real(kind=[4bytes])
                       ! True latitude 2 [degree]
  tlon  = 135.e0       ! real(kind=[4bytes])
                       ! True longitude [degree]
  disr  =   0.e0       ! real(kind=[4bytes])
                       ! Distance from center of circular cylinder to origin of
                       ! calculation domain
 /

 &gridset
  dx   = 0.0372e0      ! real(kind=[4bytes])
                       ! Grid distance in x direction [m] or [degree]
  dy   = 0.0362e0      ! real(kind=[4bytes])
                       ! Grid distance in y direction [m] or [degree]
  dz   =  350.e0       ! real(kind=[4bytes])
                       ! Grid distance in z direction [m]

  ulat =  -3.e0        ! real(kind=[4bytes])
                       ! User specified latitude [degree]
  ulon =  111.e0       ! real(kind=[4bytes])
                       ! User specified longitude [degree]

  riu  =  2.5e0        ! real(kind=[4bytes])
                       ! User specified real index in x direction
                       ! at ulat and ulon
  rju  =  2.5e0        ! real(kind=[4bytes])
                       ! User specified real index in y direction
                       ! at ulat and ulon
 /

 &gridsth
  zsfc   =    0.e0     ! real(kind=[4bytes])
                       ! Sea surface terrain height [m]

  zflat  = 24000.e0    ! real(kind=[4bytes])
                       ! Lowest flat level [m]

  sthopt =     1       ! integer(kind=[4bytes])
                       ! Option for vertical grid stretching
                       !   0: Not perform stretching
                       !   1: Perform stretching with cubic function
                       !   2: Perform stretching with hyperbolic tangent

  dzmin  =   100.e0    ! real(kind=[4bytes])
                       ! Minimum dz in lowest layer [m]

  layer1 =     0.e0    ! real(kind=[4bytes])
                       ! Lowest stretching level [m]
  layer2 = 24000.e0    ! real(kind=[4bytes])
                       ! Highest stretching level [m]
 /

 &terrain
  trnopt = 2           ! integer(kind=[4bytes])
                       ! Option for terrain height setting
                       !   0: Flat terrain
                       !   1: Bell shaped mountain
                       !   2: From external terrain data

  mnthgh = 0.e0, 0.e0  ! real(kind=[4bytes]), dimension(1:2)
                       ! Flat or bell shaped mountain height and base level
                       ! height [m]

  mntwx  = 0.e0        ! real(kind=[4bytes])
                       ! Bell shaped mountain width in x direction [m]
  mntwy  = 0.e0        ! real(kind=[4bytes])
                       ! Bell shaped mountain width in y direction [m]

  mntcx  = 0.e0        ! real(kind=[4bytes])
                       ! Center in x coordinates of bell shaped mountain [m]
  mntcy  = 0.e0        ! real(kind=[4bytes])
                       ! Center in y coordinates of bell shaped mountain [m]
 /

 &flength
  sfcast = '2013/11/04 00:00'
                       ! character(len=16,kind=[1byte])
                       ! Forecast start date
                       ! with Gregorian calendar, "yyyy/mm/dd hh:mm"

  stime  =     0.e0    ! real(kind=[4bytes])
                       ! Forecast start time [s]
  etime  = 432000.e0   ! real(kind=[4bytes])
                       ! Forecast stop time [s]
 /

 &boundry
  wbc    =  7          ! integer(kind=[4bytes])
                       ! Option for west boundary conditions
  ebc    =  7          ! integer(kind=[4bytes])
                       ! Option for east boundary conditions
  sbc    =  7          ! integer(kind=[4bytes])
                       ! Option for south boundary conditions
  nbc    =  7          ! integer(kind=[4bytes])
                       ! Option for north boundary conditions
                       !  -1: Periodic boundary conditions in group domain
                       !   1: Periodic boundary conditions in entire domain
                       !   2: Rigid wall boundary conditions
                       !   3: Zero gradient boundary conditions
                       !   4: Open boundary conditions with each grid point
                       !      phase speed
                       !   5: Open boundary conditions with vertical averaged
                       !      phase speed
                       !   6: Open boundary conditions with constant phase
                       !      speed and advection speed
                       !   7: Open boundary conditions with constant phase
                       !      speed
                       !  14: Option 7 but use option 4 for u and v in normal to
                       !      lateral boundary
                       !  15: Option 7 but use option 5 for u and v in normal to
                       !      lateral boundary
                       !  16: Option 7 but use option 6 for u and v in normal to
                       !      lateral boundary

  bbc    =  2          ! integer(kind=[4bytes])
                       ! Option for bottom boundary conditions
  tbc    =  2          ! integer(kind=[4bytes])
                       ! Option for top boundary conditions
                       !   2: Rigid wall boundary conditions
                       !   3: Zero gradient boundary conditions

  lbcvar = 'xxxxxxxxxx'
                       ! character(len=80,kind=[1byte])
                       ! Control flag of lateral boundary damped variables.
                       ! Each character is corresponding to u, v, w, p, pt, qv,
                       ! water and ice substance, aerosol mixing ratio, tracer
                       ! mixing ratio and tke in order. We can set only 10
                       ! characters.
                       !   o: Perform damping for specified variable
                       !   x: Not perform damping for specified variable

  lbnews =  0.e0       ! real(kind=[4bytes])
                       ! Lateral damping coefficient of open boundary [1/s]

  lbnorm =  0.e0       ! real(kind=[4bytes])
                       ! Lateral damping coefficient of open boundary
                       ! for u and v in normal to lateral boundary [1/s]

  gwave  = 10.0e0      ! real(kind=[4bytes])
                       ! Fastest gravity wave speed for constant phase speed
                       ! of open boundry conditions [m/s]
 /

 &gpvpram
  gpvvar = 'xoxxxxxx'  ! character(len=80,kind=[1byte])
                       ! Control flag of input external GPV variables. Each
                       ! character is corresponding to w, qv, qc, qr, qi, qs, qg
                       ! and qh in order. We can set only 8 characters.
                       !   o: Input specified variable
                       !   x: Not input specified variable

  gpvitv = 21600.e0    ! real(kind=[4bytes])
                       ! Time interval of external GPV file [s]
  aslitv =     0.e0    ! real(kind=[4bytes])
                       ! Time interval of external aerosol data file [s]

  gsmopt =     0       ! integer(kind=[4bytes])
                       ! Option for GPV data smothing
                       !   0: Not perform smoothing
                       !   1: Perform smoothing

  gsmcnt =     0       ! integer(kind=[4bytes])
                       ! Iteration count for GPV data smoothing

  gsmcoe =     0.e0    ! real(kind=[4bytes])
                       ! Interpolated GPV data smoothing coefficient [1/s]

  nggopt =     2       ! integer(kind=[4bytes])
                       ! Option for analysis nudging to GPV
                       !   0: Not perform analysis nudging
                       !   1: Perform analysis nudging with constant coefficient
                       !      and decreasing coefficient from nggc20 to nggend
                       !   2: Perform spectral nudging with constant coefficient
                       !      and decreasing coefficient from nggc20 to nggend
  ngglev =    1        ! integer(kind=[4bytes])
                       ! The lowest level of nudgings to GPV
                       ! (1) In the case of ngglev = 1,
                       !     "nggcoe" is set for all levels uniformally.
                       ! (2) In the case of ngglev /= 1,
                       !     "nggcoe" varies with the height and
                       !     is set from zero at ngglev to nggcoe at top.

  spnx = 2             ! integer(kind=[4bytes])
                       ! Truncation wave number of spectral nudging x direction
  spny = 2             ! integer(kind=[4bytes])
                       ! Truncation wave number of spectral nudging y direction
  spndlt =  1200.e0    ! real(kind=[4bytes])
                       ! Time interval of spectral nudging to GPV [s]
  spgix = 1            ! integer(kind=[4bytes])
                       ! Skipping grid interval for spectral nudging x direction
  spgiy = 1            ! integer(kind=[4bytes])
                       ! Skipping grid interval for spectral nudging y direction
  skpopt = 1           ! integer(kind=[4bytes])
                       ! Interpolation method of skipping grid.
                       !   0: bi-linear interpolation
                       !   1: Full spectral interpolation

  nggvar = 'ooxxxxxx'  ! character(len=80,kind=[1byte])
                       ! Control flag of analysis nudged variables to GPV. Each
                       ! character is corresponding to u, v, w, p, pt, qv, water
                       ! and ice substance and aerosol mixing ratio in order.
                       ! We can set only 8 characters.
                       !   o: Perform analysis nudging for specified variable
                       !   x: Not analysis nudging for specified variable

  nggcoe =   0.000277778e0   ! real(kind=[4bytes])
                       ! Analysis nudging coefficient to GPV [1/s]
  nggdlt =     4.e0    ! real(kind=[4bytes])
                       ! Time interval of analysis nudging to GPV [s]
  nggstr =     0.e0    ! real(kind=[4bytes])
                       ! Analysis nudging start time to GPV [s]
  nggend = 432000.e0   ! real(kind=[4bytes])
                       ! Analysis nudging end time to GPV [s]
  nggc20 =     0.e0    ! real(kind=[4bytes])
                       ! Start time to decrease nggcoe to 0 [s]

  exbopt =     1       ! integer(kind=[4bytes])
                       ! Option for external boundary forcing
                       !   0: Not force to external boundary data
                       !   1: Force to external boundary data
                       !   2: Force to external boundary and terrain data
                       !  11: Force to external boundary data and adjust
                       !      horizontal velocity
                       !  12: Force to external boundary and terrain data and
                       !      adjust horizontal velocity

  exbvar = '--x---xx'  ! character(len=80,kind=[1byte])
                       ! Control flag of exteranl boundary forced variables.
                       ! Each character is corresponding to u, v, w, p, pt, qv,
                       ! water and ice substance and aerosol mixing ratio in
                       ! order. We can set only 8 characters.
                       !   o: Perform forcing for specified variable
                       !   +: Perform forcing for u and v in normal to lateral
                       !      boundary and damping for the other variables
                       !   -: Perform damping for specified variable
                       !   x: Not perform damping for specified variable

  exnews =     0.0005556e0
                       ! real(kind=[4bytes])
                       ! External boundary damping coefficient [1/s]

  exnorm =     0.0005556e0
                       ! real(kind=[4bytes])
                       ! External boundary damping coefficient for u and v in
                       ! normal to lateral boundary [1/s]

  exbwid =     0       ! integer(kind=[4bytes])
                       ! Corresponded thickness between model and data height

  lspopt =     1       ! integer(kind=[4bytes])
                       ! Option for lateral sponge damping
                       !   0: Not perform lateral sponge damping
                       !   1: Perform lateral sponge damping to external data
                       !   2: Perform lateral sponge damping to base state or 0
                       !  11: Perform lateral sponge damping and smoothing
                       !      to external data
                       !  12: Perform lateral sponge damping and smoothing
                       !      to base state or 0

  lspvar = '++xoooxxxx'
                       ! character(len=80,kind=[1byte])
                       ! Control flag of lateral sponge damped variables.
                       ! Each character is corresponding to u, v, w, p, pt, qv,
                       ! water and ice substance, aerosol mixing ratio, tracer
                       ! mixing ratio and tke in order. We can set only 10
                       ! characters.
                       !   o: Perform damping for specified variable
                       !   +: Perform damping for specified variable and more
                       !      strong damping for u and v in normal to lateral
                       !      boundary
                       !   -: Perform damping only for u and v in normal to
                       !      lateral boundary
                       !   x: Not perform damping for specified variable

  lspsmt =     0.e0    ! real(kind=[4bytes])
                       ! Lateral sponge smoothing coefficient [1/s]

  lsnews =     0.00027778e0
                       ! real(kind=[4bytes])
                       ! Lateral sponge damping coefficient [1/s]

  lsnorm =     0.00027778e0
                       ! real(kind=[4bytes])
                       ! Lateral sponge damping coefficient for u and v in
                       ! normal to lateral boundary [1/s]

  wdnews =    60       ! integer(kind=[4bytes])
                       ! Lateral sponge damping thickness

  wdnorm =    20       ! integer(kind=[4bytes])
                       ! Lateral sponge damping thickness for u and v in
                       ! normal to lateral boundary

  vspopt =     1       ! integer(kind=[4bytes])
                       ! Option for vertical sponge damping
                       !   0: Not perform vertical sponge damping
                       !   1: Perform vertical sponge damping to external data
                       !   2: Perform vertical sponge damping to base state or 0

  vspvar = 'oooooooooo'
                       ! character(len=80,kind=[1byte])
                       ! Control flag of vertical sponge damped variables.
                       ! Each character is corresponding to u, v, w, p, pt, qv,
                       ! water and ice substance, aerosol mixing ratio, tracer
                       ! mixing ratio and tke in order. We can set only 10
                       ! characters.
                       !   o: Perform damping for specified variable
                       !   x: Not perform damping for specified variable

  vspgpv =     0.001111e0
                       ! real(kind=[4bytes])
                       ! Vertical sponge damping coefficient
                       ! for external data [1/s]

  vspbar =     0.001111e0
                       ! real(kind=[4bytes])
                       ! Vertical sponge damping coefficient
                       ! for base state or 0 [1/s]

  botgpv = 24000.e0    ! real(kind=[4bytes])
                       ! Lowest height of vertical sponge damping
                       ! for external data [m]
  botbar = 24000.e0    ! real(kind=[4bytes])
                       ! Lowest height of vertical sponge damping
                       ! for base state or 0 [m]
 /

 &rdrpram
  rdrvar = 'xxxx'      ! character(len=80,kind=[1byte])
                       ! Control flag of input external radar variables. Each
                       ! character is corresponding to u, v, w and precipitation
                       ! variables in order. We can set only 4 characters.
                       !   o: Input specified variable
                       !   x: Not input specified variable

  rdritv = 0.e0        ! real(kind=[4bytes])
                       ! Time interval of external radar file [s]

  ngropt = 0           ! integer(kind=[4bytes])
                       ! Option for analysis nudging to radar
                       !   0: Not perform analysis nudging
                       !   1: Perform analysis nudging from prepared data and
                       !      set time tendency and decreasing coefficient
                       !      from ngrc20 to ngrend for precipitaiton variables
                       !   2: Perform analysis nudging from prepared data
                       !  12: Perform analysis nudging from nowcast data

  ngrvar = 'xxxxx'     ! character(len=80,kind=[1byte])
                       ! Control flag of analysis nudged variables to radar.
                       ! Each character is corresponding to u, v, w, water vapor
                       ! and precipitation variables in order. We can set only
                       ! 5 characters.
                       !   o: Perform analysis nudging for specified variable
                       !   x: Not analysis nudging for specified variable

  ngrcoe = 0.e0        ! real(kind=[4bytes])
                       ! Analysis nudging coefficient to radar [1/s]
  ngrdlt = 0.e0        ! real(kind=[4bytes])
                       ! Time interval of analysis nudging to radar [s]
  ngrstr = 0.e0        ! real(kind=[4bytes])
                       ! Analysis nudging start time to radar [s]
  ngrend = 0.e0        ! real(kind=[4bytes])
                       ! Analysis nudging end time to radar [s]
  ngrc20 = 0.e0        ! real(kind=[4bytes])
                       ! Start time to decrease ngqcoe to 0 [s]
  ngraff = 0.e0        ! real(kind=[4bytes])
                       ! Analysis nudging affected time to radar [s]
 /

 &sfcphys
  sfcdat = 'xox'       ! character(len=80,kind=[1byte])
                       ! Control flag of input surface data type. Each character
                       ! is corresponding to land use, sea surface temperature
                       ! and sea ice distribution in order. We can set only
                       ! 3 characters.
                       !   o: Input specified data file
                       !   x: Not input specified data file

  sfcopt =   2         ! integer(kind=[4bytes])
                       ! Option for surface physics
                       !   0: Not perform surface physics
                       !   1: Perform surface physics
                       !   2: Perform surface physics and set constant sea
                       !      surface temperature for lapse of time
                       !   3: Perform surface physics and set external sea
                       !      surface temperature data for lapse of time
                       !  11: Perform surface physics and read soil and sea
                       !      temperature from previous running
                       !  12: Perform surface physics, set constant sea surface
                       !      temperature for lapse of time and read soil
                       !      temperature from previous running
                       !  13: Perform surface physics, set external sea surface
                       !      temperature data for lapse of time and read soil
                       !      temperature from previous running

  levpbl =   1         ! integer(kind=[4bytes])
                       ! Number of planetary boundary layer

  levund =  60         ! integer(kind=[4bytes])
                       ! Number of soil and sea layers

  dtgrd  =   4.e0      ! real(kind=[4bytes])
                       ! Time interval of soil temperature calculation [s]

  dzgrd  =   0.15e0    ! real(kind=[4bytes])
                       ! Grid distance in soil layers in z direction [m]

  dzsea  =   0.5e0     ! real(kind=[4bytes])
                       ! Grid distance in sea layers in z direction [m]

  tgdeep = 288.16e0    ! real(kind=[4bytes])
                       ! Constant soil temperature in deepest layer [K]

  prvres = 'test.res00000000'
                       ! character(len=80,kind=[1byte])
                       ! Restart file name without extension of previous running

  lnduse =   1         ! integer(kind=[4bytes])
                       ! User specified land use category
                       !   1: Specify the soil more than 0 [m] terrain height
                       !   2: Specify the snow more than 0 [m] terrain height
                       !   3: Specify the ice more than 0 [m] terrain height

  gralbe =   0.2e0     ! real(kind=[4bytes])
                       ! Albedo on soil surface

  grbeta =   0.5e0     ! real(kind=[4bytes])
                       ! Evapotranspiration efficiency on soil surface

  grz0m  =   0.4e0     ! real(kind=[4bytes])
                       ! Roughness length for velocity on soil surface [m]

  grz0h  =   0.1e0     ! real(kind=[4bytes])
                       ! Roughness length for scalar on soil surface [m]

  grcap  =   2.3e6     ! real(kind=[4bytes])
                       ! Thermal capacity of soil [J/m^3K]

  grnuu  =   7.e-7     ! real(kind=[4bytes])
                       ! Thermal diffusivity of soil [m^2/s]

  sstcst = 302.65e0    ! real(kind=[4bytes])
                       ! Constant sea surface temperature [K]

  sstitv =   0.e0      ! real(kind=[4bytes])
                       ! Time interval of external sea surface temperature data
                       ! file [s]

  dstopt =   1         ! integer(kind=[4bytes])
                       ! Option for sea ice distribution
                       !   1: ice density weighted average arrangement
                       !   2: all-or-nothing arrangement
 /

 &initype
  iniopt = 3           ! integer(kind=[4bytes])
                       ! Option for model initialization
                       !   1: From sounding data
                       !   2: From restart file
                       !   3: From external data
                       !  12: From restart file but not check previous setting

  snddim = 0           ! integer(kind=[4bytes])
                       ! Sounding data dimension

  sndtyp = 'ppm'       ! character(len=80,kind=[1byte])
                       ! Control flag of sounding data type. First word is
                       ! correponding to height or pressure, 2nd word is
                       ! correponding to temperature or potential temperature
                       ! and 3rd word is correponding to water vapor mixing
                       ! ratio or relative humidity. We can set only
                       ! 3 characters.
                       !   ppm: 1st column; pressure [Pa],
                       !        2nd column; potential temperature [K],
                       !        5th column; water vapor mixing ratio [kg/kg]
                       !   zpm: 1st column; z physical coordinates [m],
                       !        2nd column; potential temperature [K],
                       !        5th column; water vapor mixing ratio [kg/kg]
                       !   ptm: 1st column; pressure [Pa],
                       !        2nd column; temperature [K],
                       !        5th column; water vapor mixing ratio [kg/kg]
                       !   ztm: 1st column; z physical coordinates [m],
                       !        2nd column; temperature [K],
                       !        5th column; water vapor mixing ratio [kg/kg]
                       !   ppr: 1st column; pressure [Pa],
                       !        2nd column; potential temperature [K],
                       !        5th column; relative humidity [%]
                       !   zpr: 1st column; z physical coordinates [m],
                       !        2nd column; potential temperature [K],
                       !        5th column; relative humidity [%]
                       !   ptr: 1st column; pressure [Pa],
                       !        2nd column; temperature [K],
                       !        5th column; relative humidity [%]
                       !   ztr: 1st column; z physical coordinates [m],
                       !        2nd column; temperature [K],
                       !        5th column; relative humidity [%]

  zsnd0  = 0.e0        ! real(kind=[4bytes])
                       ! Reference height of sounding data at lowest plane [m].
                       ! Used only sndtyp(1:1)='p'.
  psnd0  = 0.e0        ! real(kind=[4bytes])
                       ! Reference pressure of sounding data at lowest plane
                       ! [Pa]. Used only sndtyp(1:1)='z'.

  masopt = 0           ! integer(kind=[4bytes])
                       ! Option for masscon model
                       !   0: Not perform masscon model
                       !   1: Perform masscon model

  maseps = 0.e0        ! real(kind=[4bytes])
                       ! Value of convergence of iteration for masscon

  alpha1 = 0.e0        ! real(kind=[4bytes])
                       ! Horizontal weighting coefficinent to fit to mass
                       ! consistent equation
  alpha2 = 0.e0        ! real(kind=[4bytes])
                       ! Vertical weighting coefficinent to fit to mass
                       ! consistent equation
 /

 &gridmove
  movopt = 0           ! integer(kind=[4bytes])
                       ! Option for grid moving
                       !   0: Not perform grid moving
                       !   1: Perform grid moving

  umove  = 0.e0        ! real(kind=[4bytes])
                       ! x components of grid moving speed [m/s]
  vmove  = 0.e0        ! real(kind=[4bytes])
                       ! y components of grid moving speed [m/s]
 /

 &ptinicon
  pt0opt = 0           ! integer(kind=[4bytes])
                       ! Option for initial potential temperature perturbation
                       !   0: No initial potential temperature perturbation
                       !   1: Buble shaped potential temperature perturbation
                       !      in x direction
                       !   2: Buble shaped potential temperature perturbation
                       !      in y direction
                       !   3: Sine curved potential temperature perturbation
                       !      in x direction
                       !   4: Sine curved potential temperature perturbation
                       !      in y direction
                       !   5: Random potential temperature perturbation

  pt0num = 0           ! integer(kind=[4bytes])
                       ! Number of buble shaped potential temperature
                       ! perturbations

  ptp0   = 0.e0        ! real(kind=[4bytes])
                       ! Magnitude or amplitude of potential temperature
                       ! perturbation [K]

  pt0rx  = 0.e0        ! real(kind=[4bytes])
                       ! Potential temperature pertubation radius or half
                       ! length in x direction [m]
  pt0ry  = 0.e0        ! real(kind=[4bytes])
                       ! Potential temperature pertubation radius or half
                       ! length in y direction [m]
  pt0rz  = 0.e0        ! real(kind=[4bytes])
                       ! Potential temperature pertubation radius or half
                       ! depth in z direction [m]

  pt0cx  = 0.e0        ! real(kind=[4bytes])
                       ! Center or origin in x coordinates of potential
                       ! temperature perturbation [m]
  pt0cy  = 0.e0        ! real(kind=[4bytes])
                       ! Center or origin in y coordinates of potential
                       ! temperature perturbation [m]
  pt0cz  = 0.e0        ! real(kind=[4bytes])
                       ! Center or origin in z coordinates of potential
                       ! temperature perturbation [m]

  pt0ds  = 0.e0        ! real(kind=[4bytes])
                       ! Distance between each perturbation [m]
 /

 &integrat
  dtbig  =  4.e0       ! real(kind=[4bytes])
                       ! Large time steps interval [s]
  dtsml  =  1.e0       ! real(kind=[4bytes])
                       ! Small time steps interval [s]

  gwmopt =  0          ! integer(kind=[4bytes])
                       ! Option for gravity wave mode integration
                       !   0: Gravity wave mode is integrated in large time step
                       !   1: Gravity wave mode is integrated in small time step

  impopt =  1          ! integer(kind=[4bytes])
                       ! Option for vertical implicit time integration
                       !   0: Perform HE-VE
                       !   1: Perform HE-VI with Gauss elimination
                       !   2: Perform HE-VI with partial pivoting Gauss
                       !      elimination
                       !   3: Perform HE-VI with Gauss-Seidel method

  advopt = 3           ! integer(kind=[4bytes])
                       ! Option for advection scheme,
                       ! options 4 and 5 are now under construction
                       !   1: Perform 2nd order advection
                       !   2: Perform 4th order advection in horizontal
                       !   3: Perform 4th order advection in both horizontal
                       !   4: Perform horizontal-vertical seperated Cubic
                       !      Lagrange advection scheme
                       !   5: Perform x-y-z seperated Cubic Lagrange advection
                       !      scheme

  gsdeps =  0.e0       ! real(kind=[4bytes])
                       ! Value of convergence of iteration for Gauss-Seidel
                       ! method

  weicoe =  0.6e0      ! real(kind=[4bytes])
                       ! Weighting coefficient for impilicit method

  filcoe =  0.1e0      ! real(kind=[4bytes])
                       ! Coefficient of Asselin time filter

  dtvcul =  0.e0       ! real(kind=[4bytes])
                       ! Time steps interval of vertical Cubic Lagrange
                       ! advection [s]
 /

 &smoother
  smtopt = 3           ! integer(kind=[4bytes])
                       ! Option for numerical smoothing
                       !   1: Perform 2nd order smoothing
                       !   2: Perform 4th order smoothing in horizontal
                       !   3: Perform 4th order smoothing in both horizontal
                       !      and vertical
                       !  11: Perform 2nd order and non linear smoothing
                       !  12: Perform 4th order in horizontal and non linear
                       !      smoothing
                       !  13: Perform 4th order in both horizontal and
                       !      vertical and non linear smoothing

  smhcoe = 0.0008333e0 ! real(kind=[4bytes])
                       ! Horizontal smoothig coefficient [1/s]
  smvcoe = 0.0008333e0 ! real(kind=[4bytes])
                       ! Vertical smoothig coefficient [1/s]
  nlhcoe = 0.e0        ! real(kind=[4bytes])
                       ! Horizontal non linear smoothig coefficient [1/s]
  nlvcoe = 0.e0        ! real(kind=[4bytes])
                       ! Vertical non linear smoothig coefficient [1/s]
 /

 &mapfcter
  mfcopt = 1           ! integer(kind=[4bytes])
                       ! Option for map scale factor
                       !   0: Not include map scale factor
                       !   1: Include map scale factor
 /

 &coriolis
  coropt = 1           ! integer(kind=[4bytes])
                       ! Option for Coriolis force
                       !   0: Not calculate Coriolis force
                       !   1: Calculate Coriolis force for u and v only
                       !   2: Calculate Coriolis force
 /

 &earthcrv
  crvopt = 1           ! integer(kind=[4bytes])
                       ! Option for earth curvature
                       !   0: Not calculate earth curvature
                       !   1: Calculate earth curvature
 /

 &buoyancy
  buyopt = 1           ! integer(kind=[4bytes])
                       ! Option for buoyancy calculation
                       !   0: Not calculate buoyancy term
                       !   1: Calculate buoyancy term
 /

 &diabatic
  diaopt = 0           ! integer(kind=[4bytes])
                       ! Option for diabatic calculation
                       !   0: Not calculate diabatic term
                       !   1: Calculate diabatic term
 /

 &ddamping
  divopt = 1           ! integer(kind=[4bytes])
                       ! Option for divergence damping
                       !   0: Not perform divergence damping
                       !   1: Perform divergence damping for isotropic grid
                       !   2: Perform divergence damping for anisotropic grid
 /

 &cloudphy
  cphopt = 3           ! integer(kind=[4bytes])
                       ! Option for cloud micro physics,
                       ! negative option is valid for special version
                       !   0: Not perform cloud micro physics
                       !   1: Perform bulk warm rain cloud physics
                       !   2: Perform bulk cold rain cloud physics
                       !   3: Perform bulk cold rain cloud physics with
                       !      predicting ice concentrations
                       !   4: Perform bulk cold rain cloud physics with
                       !      predicting water and ice concentrations
                       !  11: Perform warm bin cloud physics
                       !  -2: Perform bulk cold rain in option 2 with
                       !      predicting charging distributions
                       !  -3: Perform bulk cold rain in option 3 with
                       !      predicting charging distributions
                       !  -4: Perform bulk cold rain in option 4 with
                       !      predicting charging distributions

  haiopt = 0           ! integer(kind=[4bytes])
                       ! Option for additional hail processes. This option is
                       ! valid when cloud physics is bulk cold rain
                       !   0: Not perform hail processes
                       !   1: Perform hail processes

  thresq = 1.e-12      ! real(kind=[4bytes])
                       ! Minimum threshold value of mixing ratio [kg/kg]

  dtcmph = 0.e0, 0.e0  ! real(kind=[4bytes]), dimension(1:2)
                       ! Time interval of cloud micro physics. Use these
                       ! variables in the case option cphopt is greater than 10.
                       ! Each element is correspoing to condensation and
                       ! coalescence in order.

  ncbinw = 1           ! integer(kind=[4bytes])
                       ! Number of categories for warm bin

  bbinw  = 4.e0        ! real(kind=[4bytes])
                       ! Parameter of warm bin resolution,
                       ! base of exponential function in mass components
  sbinw  = 4.e0        ! real(kind=[4bytes])
                       ! Parameter of warm bin resolution,
                       ! exponent of exponential function in mass components

  qcgopt = 1           ! integer(kind=[4bytes])
                       ! Option for charging distribution,
                       ! this option is valid for special version
                       !   1: Perform charging distributions for
                       !      ice hydrometeor
                       !   2: Perform charging distributions for
                       !      water and ice hydrometeor

  eledlt = 0.e0        ! real(kind=[4bytes])
                       ! Time interval of electric field calculation [s],
                       ! this variable is valid for special version
  eii = 0.1e0          ! real(kind=[4bytes])
                       ! Collection efficiency among cloud ice  (by satoki)

 /

 &asolproc
  aslopt = 0           ! integer(kind=[4bytes])
                       ! Option for aerosol processes
                       !   0: No aerosol processes
                       !   1: Perform aerosol processes
 /

 &mixtrace
  trkopt = 0           ! integer(kind=[4bytes])
                       ! Option for mixing ratio tracking
                       !   0: No tracer mixing ratio
                       !   1: Perform tracking by initial emission
                       !   2: Perform tracking by emission between specified
                       !      time

  qt0opt = 0           ! integer(kind=[4bytes])
                       ! Option for initial tracer location
                       !   1: Buble shaped tracer in x direction
                       !   2: Buble shaped tracer in y direction
                       !   3: Sine curved tracer in x direction
                       !   4: Sine curved tracer in y direction
                       !   5: Random located tracer

  qt0num = 0           ! integer(kind=[4bytes])
                       ! Number of buble shaped tracer

  qt0    = 0.e0        ! real(kind=[4bytes])
                       ! Magnitude or amplitude of tracer [kg/kg]

  qt0rx  = 0.e0        ! real(kind=[4bytes])
                       ! Tracer radius or half length in x direction [m]
  qt0ry  = 0.e0        ! real(kind=[4bytes])
                       ! Tracer radius or half length in y direction [m]
  qt0rz  = 0.e0        ! real(kind=[4bytes])
                       ! Tracer radius or half depth in z direction [m]

  qt0cx  = 0.e0        ! real(kind=[4bytes])
                       ! Center or origin in x coordinates of tracer [m]
  qt0cy  = 0.e0        ! real(kind=[4bytes])
                       ! Center or origin in y coordinates of tracer [m]
  qt0cz  = 0.e0        ! real(kind=[4bytes])
                       ! Center or origin in z coordinates of tracer [m]

  qt0ds  = 0.e0        ! real(kind=[4bytes])
                       ! Distance between each tracer [m]

  qtdt   = 0.e0        ! real(kind=[4bytes])
                       ! Emitted tracer intensity [1/s]

  qtstr  = 0.e0        ! real(kind=[4bytes])
                       ! User specified emitting start time
  qtend  = 0.e0        ! real(kind=[4bytes])
                       ! User specified emitting end time
 /

 &turbulen
  tubopt = 2           ! integer(kind=[4bytes])
                       ! Option for turbulent mixing
                       !   0: Not perform turbulent calculation
                       !   1: Perform Smagorinsky scheme
                       !   2: Perform 1.5 order turbulent closure scheme
                       !   3: Perform 1.5 order turbulent closure scheme and
                       !      set initial mixing scheme coefficient

  isoopt = 1           ! integer(kind=[4bytes])
                       ! Option for grid shape
                       !   1: Isotropic grid
                       !   2: Anisotropic grid
  csnum = 0.21         ! Smago. Const.  ! Adding by satoki
                       ! This parameter is active when tubopt = 1.

 /

 &radation
  radopt =    0        ! integer(kind=[4bytes])
                       ! Option for turning on mstranx radiation scheme
                       !   0: Not perform mstranx radiation scheme
                       !   1: Perform mstranx radiation scheme

  radobj = -13         ! integer(kind=[4bytes])
                       ! Option for object substance in radiation scheme
                       ! negative is water only.
                       !   0: all zero
                       !   1: qv + others(from DATA.gas_ptcl) [clearsky]
                       !  10: qv + qc + others
                       !  11: qv + qc + qi + others
                       !  12: qv + qc + qi + qs + others
                       !  13: qv + qc + qi + qs + qg + others
                       !  20: qv + qr + qc + others
                       !  21: qv + qr + qc + qi + others
                       !  22: qv + qr + qc + qi + qs + others
                       !  23: qv + qr + qc + qi + qs + qg + others
                       !  -1: qv only [clearsky]
                       ! -10: qv + qc
                       ! -11: qv + qc + qi
                       ! -12: qv + qc + qi + qs
                       ! -13: qv + qc + qi + qs + qg
                       ! -20: qv + qr + qc
                       ! -21: qv + qr + qc + qi
                       ! -22: qv + qr + qc + qi + qs
                       ! -23: qv + qr + qc + qi + qs + qg

  raddlt = 600.e0, 600.e0  ! real(kind=[4bytes]), dimension(1:2)
                       ! Time interval to perform ratiation scheme [sec]
                       ! raddlt(1) : dtrad in MstrnX
                       ! raddlt(1) : dtrad in RRTM(short wave)
                       ! raddlt(2) : dtrad in RRTM(long wave)

  reliqum = 40.e0      ! real(kind=[4bytes])
                       ! Water cloud effective particle radius [um]

  reiceum = 100.e0     ! real(kind=[4bytes])
                       ! Ice cloud effective particle radius [um]

  cldlim = 1.e-8, 1.e-5
                       ! real(kind=[4bytes])
                       ! Lower limit of mass mixing ratio [kg/kg]
                       ! to consider as cloudy grid.
                       ! In mcaopt=1 & ovpopt>0 & cldlim(1)<cldlim(2),
                       ! estimate cloud fraction from cldlim(1:2).

  mcaopt = 0           ! integer(kind=[4bytes])
                       ! Option for McICA method only at RRTM scheme
                       ! 0 = not use McICA, 1 = use McICA

  ovpopt = 0           ! integer(kind=[4bytes])
                       ! Option for overlap method only at RRTM scheme
                       ! 0 = ignore cloud effect, 1 = random overlap
                       ! 2 = max/random overlap,  3 = maximum overlap

  smlgas =    1        ! integer(kind=[4bytes])
                       ! This option not used
 /

 &outfomat
  dmpfmt =     2       ! integer(kind=[4bytes])
                       ! Option for dumped file format
                       !   1: Output by text format
                       !   2: Output by binary format

  dmplev =    3        ! integer(kind=[4bytes])
                       ! Option for z coordinates of dumped variables
                       !   1: Output to terrain folowing plane
                       !   2: Output to constant plane by constant dz
                       !   3: Output to constant plane by stretched dz
                       !  11: Output to terrain folowing plane and
                       !      rotate horizontal velocity to zonal and meridional
                       !      direction
                       !  12: Output to constant plane by constant dz and
                       !      rotate horizontal velocity to zonal and meridional
                       !      direction
                       !  13: Output to constant plane by stretched dz and
                       !      rotate horizontal velocity to zonal and meridional
                       !      direction

  dmpmon =     1       ! integer(kind=[4bytes])
                       ! Option for monitor variables output
                       !   0: Output all variables to unique dumped files
                       !   1: Separate dumped files to 3 dimensional variables
                       !      and 2 dimensional monitor variables

  dmpvar = '--o---ooooooooooox'
          ! uvwppqqncattmprdtz
          !     tvhhherkoraiu
          !       yyarken dab
                       ! character(len=80,kind=[1byte])
                       ! Control flag of dumped variables. Each character is
                       ! corresponding to u, v, w, p, pt, qv, mixing ratio of
                       ! water and ice substance, concentrations of water and
                       ! ice substance, charging distributions, aerosol mixing
                       ! ratio, tracer mixing ratio, tke, surface monitor
                       ! variables, surface precipitation, heating rate by
                       ! radiation and z physical coordinates in order.
                       ! We can set only 16 characters.
                       !   o: Dump specified variable
                       !   +: Dump specified variable, and dump maximum
                       !      instantaneous wind velocity depending on tke.
                       !      So only used for tke which is corresponding to
                       !      dmpvar(12:12).
                       !   -: Dump specified variable, but not dump base state
                       !      for u, v and qv and not separate base state and
                       !      its perturbation for p and pt and dump maximum
                       !      instantaneous wind velocity instead of tke. So
                       !      only used for u, v, p, pt, qv and tke which are
                       !      corresponing to dmpvar(1:2), dmpvar(4:6) and
                       !      dmpvar(12:12).
                       !   x: Not dump specified variable

  dmpitv = 21600.e0    ! real(kind=[4bytes])
                       ! Time interval of dumped files [s]

  monitv =  3600.e0    ! real(kind=[4bytes])
                       ! Time interval of dumped files for 2 dimensional monitor
                       ! variables [s]

  resopt =     0       ! integer(kind=[4bytes])
                       ! Option for restart output
                       !   0: Not output the restart file(s)
                       !   1: Output the restart file(s) at specified time

  resitv = 86400.e0    ! real(kind=[4bytes])
                       ! Time interval of restart files [s]

  mxnopt =     1       ! integer(kind=[4bytes])
                       ! Option for maxmum and minimum output
                       !   0: Not output the maximum and minimum value
                       !   1: Output the maximum and minimum value for specified
                       !      variable

  mxnvar = 'oooooooooooo'
                       ! characeter(80)
                       ! Control flag of maximum and mininum output.
                       ! Each character is corresponding to u, v, w, p, pt, qv,
                       ! mixing ratio of water and ice substance, concentrations
                       ! of water and ice substance, charging distributions,
                       ! aerosol mixing ratio, tracer mixing ratio and tke in
                       ! order. We can set only 12 characters.
                       !   o: Output specified variable
                       !   x: Not output specified variable

  mxnitv =   600.e0    ! real(kind=[4bytes])
                       ! Time interval of maximum and minimum output to standard
                       ! i/o [s]
 /

!-----7--1----+----2----+----3----+----4----+----5----+----6----+----7----+-----

! In the following sections,
!     the namelist variables are only used in the program, gridata.

!-----7-------------------------------------------------------------------------

 &project_gpv
  mpopt_gpv = 0        ! integer(kind=[4bytes])
                       ! Option for map projection for GPV data
                       !   0: Latitude and longitude coordinates
                       !   1: Polar Stereographic projection
                       !   2: Lambert Conformal Conic projection
                       !   3: Mercator projection
                       !   4: No map projection
                       !  10: Global latitude and longitude coordinates
                       !  13: Zonal circuit Mercator projection

  nspol_gpv = 1        ! integer(kind=[4bytes])
                       ! Option for projected region for GPV data
                       !  -1: Southern hemisphere
                       !   1: Northern hemisphere

  tlat1_gpv = 0.e0     ! real(kind=[4bytes])
                       ! True latitude of GPV data 1 [degree]
  tlat2_gpv = 0.e0     ! real(kind=[4bytes])
                       ! True latitude of GPV data 2 [degree]
  tlon_gpv  = 0.e0     ! real(kind=[4bytes])
                       ! True longitude of GPV data [degree]
 /

 &gridset_gpv
  xdim_gpv = 720       ! integer(kind=[4bytes])
                       ! GPV data dimension in x direction
  ydim_gpv = 361       ! integer(kind=[4bytes])
                       ! GPV data dimension in y direction
  zdim_gpv =  23       ! integer(kind=[4bytes])
                       ! GPV data dimension in z direction

  dx_gpv   =   0.5e0   ! real(kind=[4bytes])
                       ! Grid distance in x direction of GPV
                       ! data [m] or [degree]
  dy_gpv   =   0.5e0   ! real(kind=[4bytes])
                       ! Grid distance in y direction of GPV
                       ! data [m] or [degree]

  ulat_gpv = -90.e0    ! real(kind=[4bytes])
                       ! User specified latitude on GPV data [degree]
  ulon_gpv =   0.e0    ! real(kind=[4bytes])
                       ! User specified longitude on GPV data [degree]

  riu_gpv  =   1.e0    ! real(kind=[4bytes])
                       ! User specified real index on GPV data in x direction
                       ! at ulat_gpv and ulon_gpv
  rju_gpv  =   1.e0    ! real(kind=[4bytes])
                       ! User specified real index on GPV data in y direction
                       ! at ulat_gpv and ulon_gpv
 /

 &datconf_gpv
  intopt_gpv = 1       ! integer(kind=[4bytes])
                       ! Option for GPV data interpolating
                       !   1: Perform linear interporation
                       !   2: Perform parabolic interporation

  rotopt_gpv = 0       ! integer(kind=[4bytes])
                       ! Option for rotation of wind direction in GPV data
                       !   0: Horizontal velocity is zonal and meridional
                       !      direction
                       !   1: Horizontal velocity is x-y direction

  datype_gpv = 'tr'    ! character(len=80,kind=[1byte])
                       ! Control flag of GPV data type. First word is
                       ! corresponding to temperature or potential temperature
                       ! and 2nd word is corresponding to water vapor mixing
                       ! ratio or relative humidity. We can set only
                       ! 2 characters.
                       !   tm: temperature [K] - mixing ratio [kg/kg]
                       !   pm: potential temperature [K] - mixing ratio [kg/kg]
                       !   tr: temperature [K] - relative humidity [%]
                       !   pr: potential temperature [K] - relative humidity [%]

  refsfc_gpv = 0       ! integer(kind=[4bytes])
                       ! Option for surface data reference in interporating
                       !   0: Not reference surface data
                       !   1: Reference surface data

  etrvar_gpv = 'xxxooxx'
                       ! character(len=80,kind=[1byte])
                       ! Control flag of extrapolating method. Each character is
                       ! corresponding to u, v, w, p, pt, qv, mixing ratio of
                       ! water and ice substance in order. We can set only
                       ! 7 characters.
                       !   o: Extrapolate data from 1st and 2nd layers
                       !      to model grid.
                       !   x: Copy data from 1st layer to model grid.
 /

!-----7--1----+----2----+----3----+----4----+----5----+----6----+----7----+-----

! In the following sections,
!     the namelist variables are only used in the program, asldata.

!-----7-------------------------------------------------------------------------

 &project_asl
  mpopt_asl = 0        ! integer(kind=[4bytes])
                       ! Option for map projection for aerosol data
                       !   0: Latitude and longitude coordinates
                       !   1: Polar Stereographic projection
                       !   2: Lambert Conformal Conic projection
                       !   3: Mercator projection
                       !   4: No map projection
                       !  10: Global latitude and longitude coordinates
                       !  13: Zonal circuit Mercator projection

  nspol_asl = 1        ! integer(kind=[4bytes])
                       ! Option for projected region for aerosol data
                       !  -1: Southern hemisphere
                       !   1: Northern hemisphere

  tlat1_asl = 0.e0     ! real(kind=[4bytes])
                       ! True latitude of aerosol data 1 [degree]
  tlat2_asl = 0.e0     ! real(kind=[4bytes])
                       ! True latitude of aerosol data 2 [degree]
  tlon_asl  = 0.e0     ! real(kind=[4bytes])
                       ! True longitude of aerosol data [degree]
 /

 &gridset_asl
  xdim_asl =  60       ! integer(kind=[4bytes])
                       ! Aerosol data dimension in x direction
  ydim_asl =  70       ! integer(kind=[4bytes])
                       ! Aerosol data dimension in y direction
  zdim_asl =  17       ! integer(kind=[4bytes])
                       ! Aerosol data dimension in z direction

  dx_asl   =   0.5e0   ! real(kind=[4bytes])
                       ! Grid distance in x direction of aerosol
                       ! data [m] or [degree]
  dy_asl   =   0.4e0   ! real(kind=[4bytes])
                       ! Grid distance in y direction of aerosol
                       ! data [m] or [degree]

  ulat_asl =  20.4e0   ! real(kind=[4bytes])
                       ! User specified latitude on aerosol data [degree]
  ulon_asl = 120.e0    ! real(kind=[4bytes])
                       ! User specified longitude on aerosol data [degree]

  riu_asl  =   1.e0    ! real(kind=[4bytes])
                       ! User specified real index on aerosol data
                       ! in x direction at ulat_asl and ulon_asl
  rju_asl  =   1.e0    ! real(kind=[4bytes])
                       ! User specified real index on aerosol data
                       ! in y direction at ulat_asl and ulon_asl
 /

 &datconf_asl
  intopt_asl = 1       ! integer(kind=[4bytes])
                       ! Option for aerosol data interpolating
                       !   1: Perform linear interporation
                       !   2: Perform parabolic interporation
 /

!-----7--1----+----2----+----3----+----4----+----5----+----6----+----7----+-----

! In the following sections,
!     the namelist variables are only used in the program, solver or radata.

!-----7-------------------------------------------------------------------------

 &project_rdr
  mpopt_rdr = 0        ! integer(kind=[4bytes])
                       ! Option for map projection for radar data
                       !   0: Latitude and longitude coordinates
                       !   1: Polar Stereographic projection
                       !   2: Lambert Conformal Conic projection
                       !   3: Mercator projection
                       !   4: No map projection
                       !  10: Global latitude and longitude coordinates
                       !  13: Zonal circuit Mercator projection

  nspol_rdr = 1        ! integer(kind=[4bytes])
                       ! Option for projected region for radar data
                       !  -1: Southern hemisphere
                       !   1: Northern hemisphere

  tlat1_rdr = 0.e0     ! real(kind=[4bytes])
                       ! True latitude of radar data 1 [degree]
  tlat2_rdr = 0.e0     ! real(kind=[4bytes])
                       ! True latitude of radar data 2 [degree]
  tlon_rdr  = 0.e0     ! real(kind=[4bytes])
                       ! True longitude of radar data [degree]
 /

 &gridset_rdr
  xdim_rdr = 1         ! integer(kind=[4bytes])
                       ! Radar data dimension in x direction
  ydim_rdr = 1         ! integer(kind=[4bytes])
                       ! Radar data dimension in y direction
  zdim_rdr = 1         ! integer(kind=[4bytes])
                       ! Radar data dimension in z direction

  dx_rdr   = 1.e0      ! real(kind=[4bytes])
                       ! Grid distance in x direction of radar
                       ! data [m] or [degree]
  dy_rdr   = 1.e0      ! real(kind=[4bytes])
                       ! Grid distance in y direction of radar
                       ! data [m] or [degree]

  ulat_rdr = 0.e0      ! real(kind=[4bytes])
                       ! User specified latitude on radar data [degree]
  ulon_rdr = 0.e0      ! real(kind=[4bytes])
                       ! User specified longitude on radar data [degree]

  riu_rdr  = 0.e0      ! real(kind=[4bytes])
                       ! User specified real index on radar data in x direction
                       ! at ulat_rdr and ulon_rdr
  rju_rdr  = 0.e0      ! real(kind=[4bytes])
                       ! User specified real index on radar data in y direction
                       ! at ulat_rdr and ulon_rdr
 /

 &datconf_rdr
  rotopt_rdr = 1       ! integer(kind=[4bytes])
                       ! Option for rotation of wind direction in radar data
                       !   0: Horizontal velocity is zonal and meridional
                       !      direction
                       !   1: Horizontal velocity is x-y direction

  datype_rdr = 'r'     ! character(len=80,kind=[1byte])
                       ! Control flag of radar data type.
                       !   m: mixing ratio [kg/kg]
                       !   r: reflection intensity [dBZe]

  rdrcoe_rdr = 0.e0    ! real(kind=[4bytes])
                       ! Coeffient of converter of [dBZe] to [kg/m^3]

  rdrexp_rdr = 0.e0    ! real(kind=[4bytes])
                       ! Exponent of converter of [dBZe] to [kg/m^3]
 /

!-----7--1----+----2----+----3----+----4----+----5----+----6----+----7----+-----

! In the following sections,
!     the namelist variables are only used in the program, terrain.

!-----7-------------------------------------------------------------------------

 &project_trn
  mpopt_trn = 0        ! integer(kind=[4bytes])
                       ! Option for map projection for terrain data
                       !   0: Latitude and longitude coordinates
                       !   1: Polar Stereographic projection
                       !   2: Lambert Conformal Conic projection
                       !   3: Mercator projection
                       !   4: No map projection
                       !  10: Global latitude and longitude coordinates
                       !  13: Zonal circuit Mercator projection

  nspol_trn = 1        ! integer(kind=[4bytes])
                       ! Option for projected region for terrain data
                       !  -1: Southern hemisphere
                       !   1: Northern hemisphere

  tlat1_trn = 0.e0     ! real(kind=[4bytes])
                       ! True latitude of terrain data 1 [degree]
  tlat2_trn = 0.e0     ! real(kind=[4bytes])
                       ! True latitude of terrain data 2 [degree]
  tlon_trn  = 0.e0     ! real(kind=[4bytes])
                       ! True longitude of terrain data [degree]
 /

 &gridset_trn
  xdim_trn = 8400      ! integer(kind=[4bytes])
                       ! Terrain data dimension in x direction
  ydim_trn = 6000      ! integer(kind=[4bytes])
                       ! Terrain data dimension in y direction

  dx_trn   =    0.008333e0
                       ! real(kind=[4bytes])
                       ! Grid distance in x direction of terrain
                       ! data [m] or [degree]
  dy_trn   =    0.008333e0
                       ! real(kind=[4bytes])
                       ! Grid distance in y direction of terrain
                       ! data [m] or [degree]

  ulat_trn =  -9.9958e0
                       ! real(kind=[4bytes])
                       ! User specified latitude on terrain data [degree]
  ulon_trn =  110.0042e0
                       ! real(kind=[4bytes])
                       ! User specified longitude on terrain data [degree]

  riu_trn  =    1.e0   ! real(kind=[4bytes])
                       ! User specified real index on terrain data in
                       ! x direction at ulat_trn and ulon_trn
  rju_trn  =    1.e0   ! real(kind=[4bytes])
                       ! User specified real index on terrain data in
                       ! y direction at ulat_trn and ulon_trn
 /

 &datconf_trn
  intopt_trn = 1       ! integer(kind=[4bytes])
                       ! Option for terrain data interpolating
                       !   1: Perform linear interporation
                       !   2: Perform parabolic interporation
 /

!-----7--1----+----2----+----3----+----4----+----5----+----6----+----7----+-----

! In the following sections,
!     the namelist variables are only used in the program, surface.

!-----7-------------------------------------------------------------------------

 &project_lnd
  mpopt_lnd = 0        ! integer(kind=[4bytes])
                       ! Option for map projection for land use data
                       !   0: Latitude and longitude coordinates
                       !   1: Polar Stereographic projection
                       !   2: Lambert Conformal Conic projection
                       !   3: Mercator projection
                       !   4: No map projection
                       !  10: Global latitude and longitude coordinates
                       !  13: Zonal circuit Mercator projection

  nspol_lnd = 1        ! integer(kind=[4bytes])
                       ! Option for projected region for land use data
                       !  -1: Southern hemisphere
                       !   1: Northern hemisphere

  tlat1_lnd = 0.e0     ! real(kind=[4bytes])
                       ! True latitude of land use data 1 [degree]
  tlat2_lnd = 0.e0     ! real(kind=[4bytes])
                       ! True latitude of land use data 2 [degree]
  tlon_lnd  = 0.e0     ! real(kind=[4bytes])
                       ! True longitude of land use data [degree]
 /

 &gridset_lnd
  xdim_lnd = 1         ! integer(kind=[4bytes])
                       ! Land use data dimension in x direction
  ydim_lnd = 1         ! integer(kind=[4bytes])
                       ! Land use data dimension in y direction

  dx_lnd   = 1.e0      ! real(kind=[4bytes])
                       ! Grid distance in x direction of land use
                       ! data [m] or [degree]
  dy_lnd   = 1.e0      ! real(kind=[4bytes])
                       ! Grid distance in y direction of land use
                       ! data [m] or [degree]

  ulat_lnd = 0.e0      ! real(kind=[4bytes])
                       ! User specified latitude on land use data [degree]
  ulon_lnd = 0.e0      ! real(kind=[4bytes])
                       ! User specified longitude on land use data [degree]

  riu_lnd  = 0.e0      ! real(kind=[4bytes])
                       ! User specified real index on land use data in
                       ! x direction at ulat_lnd and ulon_lnd
  rju_lnd  = 0.e0      ! real(kind=[4bytes])
                       ! User specified real index on land use data in
                       ! y direction at ulat_lnd and ulon_lnd
 /

 &datconf_lnd
  intopt_lnd =  0      ! integer(kind=[4bytes])
                       ! Option for linear interpolating for land use data
                       !   0: Not interpolate land use data, get value nearest
                       !      data point
                       !   1: Interpolate land use data

  numctg_lnd = 10      ! integer(kind=[4bytes])
                       ! Number of land use data categories

  lnduse_lnd = -1,   11,   12,   13,   14,   15,   16,   17,   18,   19
                       ! integer(kind=[4bytes]), dimension(1:100)
                       ! User specified land use data

  albe_lnd   =  0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0
                       ! real(kind=[4bytes]), dimension(1:100)
                       ! User specified albedo data

  beta_lnd   =  0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0
                       ! real(kind=[4bytes]), dimension(1:100)
                       ! User specified evapotranspiration efficiency data

  z0m_lnd    =  0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0
                       ! real(kind=[4bytes]), dimension(1:100)
                       ! User specified roughness length data for velocity [m]

  z0h_lnd    =  0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0
                       ! real(kind=[4bytes]), dimension(1:100)
                       ! User specified roughness length data for scalar [m]

  cap_lnd    =  0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0
                       ! real(kind=[4bytes]), dimension(1:100)
                       ! Thermal capacity of soil [J/m^3K]

  nuu_lnd    =  0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0, 0.e0
                       ! real(kind=[4bytes]), dimension(1:100)
                       ! Thermal diffusivity of soil [m^2/s]
 /

 &project_sst
  mpopt_sst = 0        ! integer(kind=[4bytes])
                       ! Option for map projection
                       ! for sea surface temperature data
                       !   0: Latitude and longitude coordinates
                       !   1: Polar Stereographic projection
                       !   2: Lambert Conformal Conic projection
                       !   3: Mercator projection
                       !   4: No map projection
                       !  10: Global latitude and longitude coordinates
                       !  13: Zonal circuit Mercator projection

  nspol_sst = 1        ! integer(kind=[4bytes])
                       ! Option for projected region
                       ! for sea surface temperature data
                       !  -1: Southern hemisphere
                       !   1: Northern hemisphere

  tlat1_sst = 0.e0     ! real(kind=[4bytes])
                       ! True latitude of sea surface temperature
                       ! data 1 [degree]
  tlat2_sst = 0.e0     ! real(kind=[4bytes])
                       ! True latitude of sea surface temperature
                       ! data 2 [degree]
  tlon_sst  = 0.e0     ! real(kind=[4bytes])
                       ! True longitude of sea surface temperature data [degree]
 /

 &gridset_sst
  xdim_sst = 1440      ! integer(kind=[4bytes])
                       ! Sea surface temperature data dimension in x direction
  ydim_sst = 720       ! integer(kind=[4bytes])
                       ! Sea surface temperature data dimension in y direction

  dx_sst   = 0.25e0    ! real(kind=[4bytes])
                       ! Grid distance in x direction of sea surface temperature
                       ! data [m] or [degree]
  dy_sst   = 0.25e0    ! real(kind=[4bytes])
                       ! Grid distance in y direction of sea surface temperature
                       ! data [m] or [degree]

  ulat_sst = -89.875e0 ! real(kind=[4bytes])
                       ! User specified latitude on sea surface
                       ! temperature data [degree]
  ulon_sst =   0.125e0 ! real(kind=[4bytes])
                       ! User specified longitude on sea surface
                       ! temperature data [degree]

  riu_sst  =   1.e0    ! real(kind=[4bytes])
                       ! User specified real index on sea surface temperature
                       ! data in x direction at ulat_sst and ulon_sst
  rju_sst  =   1.e0    ! real(kind=[4bytes])
                       ! User specified real index on sea surface temperature
                       ! data in y direction at ulat_sst and ulon_sst
 /

 &project_ice
  mpopt_ice = 0        ! integer(kind=[4bytes])
                       ! Option for map projection for sea ice distribution data
                       !   0: Latitude and longitude coordinates
                       !   1: Polar Stereographic projection
                       !   2: Lambert Conformal Conic projection
                       !   3: Mercator projection
                       !   4: No map projection
                       !  10: Global latitude and longitude coordinates
                       !  13: Zonal circuit Mercator projection

  nspol_ice = 1        ! integer(kind=[4bytes])
                       ! Option for projected region
                       ! for sea ice distribution data
                       !  -1: Southern hemisphere
                       !   1: Northern hemisphere

  tlat1_ice = 0.e0     ! real(kind=[4bytes])
                       ! True latitude of sea ice distribution data 1 [degree]
  tlat2_ice = 0.e0     ! real(kind=[4bytes])
                       ! True latitude of sea ice distribution data 2 [degree]
  tlon_ice  = 0.e0     ! real(kind=[4bytes])
                       ! True longitude of sea ice distribution data [degree]
 /

 &gridset_ice
  xdim_ice = 1         ! integer(kind=[4bytes])
                       ! Sea ice distribution data dimension in x direction
  ydim_ice = 1         ! integer(kind=[4bytes])
                       ! Sea ice distribution data dimension in y direction

  dx_ice   = 1.e0      ! real(kind=[4bytes])
                       ! Grid distance in x direction of sea ice distribution
                       ! data [m] or [degree]
  dy_ice   = 1.e0      ! real(kind=[4bytes])
                       ! Grid distance in y direction of sea ice distribution
                       ! data [m] or [degree]

  ulat_ice = 0.e0      ! real(kind=[4bytes])
                       ! User specified latitude on sea ice distribution
                       ! data [degree]
  ulon_ice = 0.e0      ! real(kind=[4bytes])
                       ! User specified longitude on sea ice distribution
                       ! data [degree]

  riu_ice  = 0.e0      ! real(kind=[4bytes])
                       ! User specified real index on sea ice distribution data
                       ! in x direction at ulat_ice and ulon_ice
  rju_ice  = 0.e0      ! real(kind=[4bytes])
                       ! User specified real index on sea ice distribution data
                       ! in y direction at ulat_ice and ulon_ice
 /

!-----7--1----+----2----+----3----+----4----+----5----+----6----+----7----+-----

! In the following section,
!     the namelist variables are only used in the program, unite.

!-----7-------------------------------------------------------------------------

 &uniconf_uni
  fltyp_uni  = 'all'   ! character(len=80,kind=[1byte])
                       ! Control flag of processed file type
                       !   dmp: unite dumped history files
                       !   mon: unite dumped history files for monitor variables
                       !   geo: unite dumped geography files
                       !   all: unite dumped history and geography files

  flitv_uni  = 3600.e0 ! real(kind=[4bytes])
                       ! Time interval of original dumped file [s]

  rmopt_uni  =    1    ! integer(kind=[4bytes])
                       ! Option for original dumped files removing
                       !   0: remain original dumped files
                       !   1: remove original dumped files

  uniopt_uni =   -5    ! integer(kind=[4bytes])
                       ! Option for uniting process
                       !   1: unite sub domain files to entire domain file
                       !   2: unite sub domain files to reductional entire
                       !      domain file
                       !   3: unite group domain files to entire domain file
                       !   4: unite group domain files to reductional entire
                       !      domain file
                       !   5: unite sub domain files to each group domain files
                       !   6: unite sub domain files to user specified group
                       !      domain file

  ugroup_uni =    0    ! integer(kind=[4bytes])
                       ! User specified and united group number in entire domain
 /

!-----7--1----+----2----+----3----+----4----+----5----+----6----+----7----+-----

! In the following section,
!     the namelist variables are only used in the program, rstruct.

!-----7-------------------------------------------------------------------------

 &rstconf_rst
  xsub_rst  =    1     ! integer(kind=[4bytes])
                       ! Number of sub domain in group domain in x direction
                       ! for restructed files
  ysub_rst  =    4     ! integer(kind=[4bytes])
                       ! Number of sub domain in group domain in y direction
                       ! for restructed files

  flitv_rst = 1200.e0  ! real(kind=[4bytes])
                       ! Time interval of original restart file [s]

  rmopt_rst =    1     ! integer(kind=[4bytes])
                       ! Option for original restart files removing
                       !   0: remain original restart files
                       !   1: remove original restart files
 /
